@page "/ConsultaEntradas"
@inject HttpClient httpClient

@using System.Globalization
@using System.Net.Http.Json
@using System.Linq


<div class="card">
    <div class="card">
        <div class="card-header">
            <h3> Consulta de Entradas </h3>
        </div>

        <div class="card-body">
            <form>
                <div class="input-group d-flex align-items-end">
                    <InputSelect class="form-control col-2" @bind-Value="filtro">
                        <option value="">Seleccionar opción</option>
                        <option value="1">Entrada ID</option>
                        <option value="2">Fecha</option>
                        <option value="3">Concepto</option>
                        <option value="4">Cantidad Producida</option>
                    </InputSelect>

                    <div class="flex-fill mx-2">
                        <div class="input-group">
                            <label class="input-group-text"> Busqueda </label>
                            <InputText class="form-control" @bind-Value="Criterio" />
                        </div>
                    </div>

                    <button type="button" class="btn btn-sm btn-primary" @onclick="Buscar"><span class="oi oi-magnifying-glass"></span> Buscar </button>
                    <button type="button" class="btn btn-sm btn-primary" @onclick="Reiniciar"><span class="oi oi-reload"></span> Reiniciar </button>
                </div>
            </form>
        </div>

        @if (L_EntradasFiltrados is not null && L_EntradasFiltrados.Count > 0)
        {
            <table class="table table-striped table-hover">
                
                <thead>
                    <tr>
                        <th>Entrada ID</th>
                        <th>Fecha</th>
                        <th>Concepto</th>
                        <th>Cantidad Producida</th>
                        <th></th>
                    </tr>

                </thead>
                        
                <tbody>
                    @foreach (var item in L_EntradasFiltrados)
                    {
                        <tr>
                            <td>@item.EntradaId</td>
                            <td>@item.Fecha.ToString("dd/MM/yyyy")</td>
                            <td>@item.Concepto</td>
                            <td>@item.CantidadProducida</td>
                            <td><a href="RegistroProductos/@item.EntradaId"><span class="oi oi-eye"></span></a></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>

    <div class="card-footer">
        <div class="form-row justify-content-sm-between" aria-orientation="vertical">
            <div class="col-3">
                <label for="CantidaRegistro" class="col-form-label"><strong>Filas</strong>&nbsp;</label>
                <input id="CantidaRegistro" @bind-value="@Conteo" disabled class="form-control" />
            </div>
        </div>
    </div>
</div>




@code
{
    public int Conteo { get; set; }
    public Entradas entradas { get; set; } = new Entradas();
    public List<Entradas> L_Entradas { get; set; } = new List<Entradas>();
    public List<Entradas> L_EntradasFiltrados { get; set; } 
    public string filtro { get; set; }
    public string Criterio { get; set; }



    protected override async Task OnInitializedAsync()
    {
        var entrada = await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas");

        if (entrada is not null)
        {
            L_Entradas = entrada;
        }
    }

    public async Task Buscar()
    {
        L_Entradas = await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas");

        if (!string.IsNullOrEmpty(Criterio) && !string.IsNullOrEmpty(filtro))
        {
            switch (filtro)
            {
                case "1":
                    L_EntradasFiltrados = L_Entradas.Where(e => e.EntradaId.ToString() == Criterio).ToList();
                    break;
               
                case "2":
                    if (DateTime.TryParseExact(Criterio, "dd/MM/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime fechaNacimiento))
                    {
                        L_EntradasFiltrados = L_Entradas.Where(e => e.Fecha.Date == fechaNacimiento.Date).ToList();
                    }
                    else
                    {
                        L_EntradasFiltrados = L_Entradas;
                    }
                    break;

                case "3":
                    L_EntradasFiltrados = L_Entradas.Where(e => e.Concepto.Contains(Criterio, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
               
                case "4":
                    L_EntradasFiltrados = L_Entradas.Where(e => e.CantidadProducida.ToString() == Criterio).ToList();
                    break;
                default:
                    L_EntradasFiltrados = L_Entradas;
                    break;
            }
        }
        else
        {
            L_EntradasFiltrados = L_Entradas;
        }

        Conteo = L_EntradasFiltrados != null ? L_EntradasFiltrados.Count() : 0;
        StateHasChanged();
    }

    public void Reiniciar()
    {
        filtro = string.Empty;
        Criterio = string.Empty;
        L_Entradas.Clear();
        L_EntradasFiltrados = null; 
        Conteo = 0;
    }

}