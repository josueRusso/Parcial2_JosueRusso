@page "/Entradas"
@page "/Entradas/{EntradasId:int}"
@inject HttpClient httpClient
@inject NotificationService notificationService

<PageTitle>Registro de produccion.</PageTitle>

<RadzenTemplateForm TItem="Entradas" Data="@Entradas" Submit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card text-dark bg-light mb-3 shadow-lg">
            <div class="card-header">
                <h3>Entrada/Salida de productos empacados</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-4">
                        <label for="EntradaId">EntradaId:</label>
                        <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                            <div class="input-group mb-3">
                                <InputNumber @bind-Value="Entradas.EntradaId" class="form-control" aria-describedby="BotonBuscar" />
                                <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class="oi oi-magnifying-glass" /></button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-3">
                        <label for="Fecha">Fecha:</label>
                        <input TValue="DateTime" disabled="true" @bind="@Entradas.Fecha" type="date" class="form-control" id="Fecha" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <RadzenLabel Text="Concepto:" />
                        <RadzenTextBox style="width: 100%;" Name="Concepto" @bind-Value="@Entradas.Concepto" />
                        <RadzenRequiredValidator Component="Concepto" Text="El concepto es obligatorio" Popup="true" Style="position: absolute" />

                    </div>
                </div>
                <hr>
                <fieldset>
                    <legend>Utilizados:</legend>
                    <div class="row">
                        <div class="col-4">
                            <label for="SelectP">Producto:</label>
                            <RadzenDropDown class="form-control" Data="@ProductoList.Where(p => p.ProductoId != 5)" TextProperty="Descripcion" ValueProperty="ProductoId" @bind-Value="@EntradasDetalle.ProductoId"></RadzenDropDown>
                        </div>
                        <div class="col-4">
                            <label for="CantidadP">Cantidad:</label>
                            <div class="input-group">
                                <input @bind="@EntradasDetalle.CantidadUtilizada" type="Text" id="CantidadP" class="form-control" />
                                <button type="button" class="btn btn-dark" @onclick="AgregarDetalle">Agregar <i class="oi oi-plus" /></button>
                            </div>
                        </div>
                    </div>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>ProductoId</th>
                                <th>Descripción</th>
                                <th>Cantidad</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Entradas.EntradasDetalles)
                            {
                                <tr>
                                    <td>@item.ProductoId</td>
                                    <td>@ProductoList.FirstOrDefault(p => p.ProductoId == item.ProductoId)?.Descripcion</td>
                                    <td>@item.CantidadUtilizada</td>
                                    <td>
                                        <button class="btn btn-danger mr-2" onclick="@(() => EliminarDetalle(item))"><i class="oi oi-trash"></i></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <hr>
                    <div class="row d-flex justify-content-center">
                        <div class="col-5">
                            <label for="Total">Cantidades totales utilizadas:</label>
                            <input @bind="@Total" disabled="true" type="text" class="form-control" />
                        </div>
                    </div>
                </fieldset>
                <hr>
                <fieldset>
                    <legend>Producido:</legend>
                    <div class="row">
                        <div class="col-3">
                            <RadzenDropDown class="form-control" Data="@ProductoList" TextProperty="Descripcion" ValueProperty="ProductoId" @bind-Value="@Entradas.ProductoId"></RadzenDropDown>
                        </div>
                        <div class="col-2">
                            <input @bind="@Entradas.CantidadProducida" type="text" class="form-control" placeholder="Cantidad" />
                        </div>
                    </div>
                </fieldset>
            </div>
            <div class="card-footer d-flex justify-content-center">
                <div class="row">
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
                        <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document" /></button>
                        <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</RadzenTemplateForm>


@code
{
    [Parameter]
    public int EntradasId { get; set; }

    public int ProductoId { get; set; }

    public Entradas Entradas { get; set; } = new Entradas();

    public EntradasDetalle EntradasDetalle { get; set; } = new EntradasDetalle();

    public List<Productos> ProductoList { get; set; } = new List<Productos>();

    public int Total { get; set; } = 0;

    public int Cantidad { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var Productos = await httpClient.GetFromJsonAsync<List<Productos>>("api/Productos");

        if (Productos is not null)
        {
            ProductoList = Productos;
        }
    }

    public void Nuevo()
    {
        Entradas = new Entradas();
        Total = 0;
    }

    public async Task Buscar()
    {
        try
        {
            int Suma = 0;
            var buscar = await httpClient.GetFromJsonAsync<Entradas>($"api/Entradas/{Entradas.EntradaId}");
            if (buscar != null)
            {
                this.Entradas = buscar;
            }
            else
            {
                notificationService.ShowNotification(
                    titulo: "Error de búsqueda",
                    mensaje: "Registro no encontrado",
                    NotificationSeverity.Error);
            }
            foreach (var item in Entradas.EntradasDetalles)
            {
                Suma += (int)item.CantidadUtilizada;
                Total = Suma;
            }
        }
        catch (Exception ex)
        {
            notificationService.ShowNotification(
                titulo: "Error de búsqueda",
                mensaje: ex.Message,
                NotificationSeverity.Error);
        }
    }


    public bool Validar()
    {
        if (string.IsNullOrEmpty(Entradas.Concepto))
        {
            return false;
        }
        if (Entradas.PesoTotal < 0)
        {
            return false;
        }
        if (Entradas.ProductoId < 0)
        {
            return false;
        }
        if (Entradas.CantidadProducida < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public bool ValidarDetalle()
    {
        if (EntradasDetalle.ProductoId < 0)
        {
            return false;
        }
        if (EntradasDetalle.CantidadUtilizada < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public async Task Guardar()
    {
        try
        {
            using var response = await httpClient.PostAsJsonAsync("api/Entradas", Entradas);
            response.EnsureSuccessStatusCode();

            var entradaDevuelta = await response.Content.ReadFromJsonAsync<Entradas>();
            if (entradaDevuelta != null)
            {
                notificationService.ShowNotification(
                    titulo: "Éxito",
                    mensaje: "Guardado correctamente",
                    NotificationSeverity.Success);
                this.Entradas = entradaDevuelta;
            }
        }
        catch (Exception ex)
        {
            notificationService.ShowNotification(
                titulo: "Error al guardar",
                mensaje: ex.Message,
                NotificationSeverity.Error);
        }
    }


    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Entrada/{Entradas.EntradaId}");

        if (Validar())
        {
            if (!response.IsSuccessStatusCode)
            {

                notificationService.ShowNotification(
                    titulo: "Error al Eliminar",
                    mensaje: "No se pudo eliminar",
                    NotificationSeverity.Error);
                return;
            }
            else
            {
                Nuevo();
            }
        }
    }

    private async Task<Productos> BuscarEntradas(int ProductoId)
    {
        var producto = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{ProductoId}");

        if (producto == null)
        {
            return new Productos();
        }

        return producto;
    }


    public async Task AgregarDetalle()
    {
        if (ValidarDetalle())
        {
            if (EntradasDetalle.CantidadUtilizada <= 0)
            {
                notificationService.ShowNotification(titulo: "Error", mensaje: "La cantidad a utilizar debe ser mayor que cero", NotificationSeverity.Warning);
                return;
            }

            var producto = await BuscarEntradas(EntradasDetalle.ProductoId);

            if (Entradas != null)
            {
                int Suma = 0;

                if (EntradasDetalle.CantidadUtilizada > producto.Existencia)
                {
                    notificationService.ShowNotification(titulo: "Error", mensaje: "La cantidad a utilizar es mayor que la existencia del producto", NotificationSeverity.Warning);
                    return;
                }

                EntradasDetalle.EntradaId = Entradas.EntradaId;
                Entradas.EntradasDetalles.Add(EntradasDetalle);
                EntradasDetalle = new EntradasDetalle();

                foreach (var item in Entradas.EntradasDetalles)
                {
                    Suma += (int)item.CantidadUtilizada;
                    Total = Suma;
                }
                Entradas.CantidadProducida = Total * 2;
            }
        }
    }

    public void EliminarDetalle(EntradasDetalle entradasDetalle)
    {
        this.Entradas.EntradasDetalles.Remove(entradasDetalle);

        Total = this.Entradas.EntradasDetalles.Sum(t => (int)t.CantidadUtilizada);
        Entradas.CantidadProducida = Total * 2;
    }
}
